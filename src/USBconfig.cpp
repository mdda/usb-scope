// -*- C++ -*- generated by wxGlade 0.6.3 on Fri Sep 25 19:09:08 2009

#include "USBconfig.h"
#include "usb_utils.h"

// begin wxGlade: ::extracode
// end wxGlade

MyFrame::MyFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
  // begin wxGlade: MyFrame::MyFrame
  button_1 = new wxButton(this, wxID_ANY, wxT("GUI not ready"));

  set_properties();
  do_layout();
  // end wxGlade
}


void MyFrame::set_properties() {
  // begin wxGlade: MyFrame::set_properties
  SetTitle(wxT("frame_1"));
  // end wxGlade
}


void MyFrame::do_layout() {
  // begin wxGlade: MyFrame::do_layout
  wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
  sizer_1->Add(button_1, 0, wxADJUST_MINSIZE, 0);
  SetSizer(sizer_1);
  sizer_1->Fit(this);
  Layout();
  // end wxGlade
}



class USBconfig: public wxApp {
public:
  bool OnInit();

//    virtual int OnExit();
//    virtual int OnRun();
  virtual void OnInitCmdLine(wxCmdLineParser& parser);
  virtual bool OnCmdLineParsed(wxCmdLineParser& parser);

  int LineToState(wxString s);

private:
  struct usb_device *dev; // Pointer to the (single) programmer 
};

IMPLEMENT_APP(USBconfig)

bool USBconfig::OnInit() {
  // call default behaviour (mandatory to parse the command line)
  if (!wxApp::OnInit())
      return false;

  wxInitAllImageHandlers();
  MyFrame* frame_1 = new MyFrame(NULL, wxID_ANY, wxEmptyString);
  SetTopWindow(frame_1);
  frame_1->Show();
  return true;
}

/*
int USBconfig::OnExit()
{
    // clean up
    return 0;
}
 
int USBconfig::OnRun()
{
    int exitcode = wxApp::OnRun();
    //wxTheClipboard->Flush();
    if (exitcode!=0)
        return exitcode;
}
*/

void USBconfig::OnInitCmdLine(wxCmdLineParser& parser) {
  parser.SetDesc (g_cmdLineDesc);
  // must refuse '/' as parameter starter or cannot use "/path" style paths
  parser.SetSwitchChars (wxT("-"));
}

bool USBconfig::OnCmdLineParsed(wxCmdLineParser& parser) {
  // printf("Hello World : OnCmdLineParsed\n");
  int verbose = !parser.Found(wxT("d"));  // always be verbose, unless in 'dump' format
 
/* 
  // to get at your unnamed parameters use
  wxArrayString files;
  for (int i = 0; i < parser.GetParamCount(); i++) {
    files.Add(parser.GetParam(i));
  }
*/ 

  if(parser.Found(wxT("g"))) {  // want_gui
    return true;  // All the below has to be handled as if the user can't see the command line
  }

  dev = lib_find_usb_device(SLOSCOPE_VENDOR, SLOSCOPE_PRODUCT);
  if(dev == NULL) {
    printf("ERROR : Pololu USB Programmer : Device not found\n");
    return false;
  }
  
/* ---------------------------------------------------------------------------- */  
/* -----Implement the various settings given on the device--------------------- */  
/* ---------------------------------------------------------------------------- */  
  
  //printf("Found Pololu USB Programmer\n");
  usb_dev_handle *handle=usb_open(dev);
  
  if(verbose) {
    // Hmm : on Linux madison 2.6.30.8-64.fc11.x86_64 #1 SMP Fri Sep 25 04:43:32 EDT 2009 x86_64 x86_64 x86_64 GNU/Linux
    //   - needs to be root to read device descriptors properly : What is fix ??
   
    // And : on 
    //   - everything is hunky-dory.

    // usb_set_debug(2);
  }

  long int value=0; // Used for the various settings
  
  if(parser.Found(wxT("s"), &value)) {
    int v=value;
    if(v == SLOSCOPE_STATE_OFF || v == SLOSCOPE_STATE_2ANALOG || v == SLOSCOPE_STATE_1ANALOG_1DIGITAL) {
      getset_slo_scope_state(handle, &v);
    }
    else {
      printf("ERROR : Invalid slo_scope_state value : '%d'\n", v);
    }
  }
  
  if(0) { //  TESTING
    usb_close(handle);
    return false;
  } 
  
  if(parser.Found(wxT("p"), &value)) {
    int v=value;
    if(v > 0) {
      getset_slo_scope_period(handle, &v);
    }
    else {
      printf("ERROR : Invalid slo_sco_period value : '%d'\n", v);
    }
  }

  wxString value_a, value_b;
  int set_a = parser.Found(wxT("a"), &value_a);
  int set_b = parser.Found(wxT("b"), &value_b);
 
  if(set_a || set_b) {  // Something to do
    int state_a=0xFF, state_b=0xFF; // leave unchanged by default
    if(set_a) {
      state_a = LineToState(value_a);
      if(state_a>3) {  // Since it was a set value, it can't be unchanged...
        printf("ERROR : Bad value '%s' for line A setting\n", value_a.c_str());
      }
    }
    if(set_b) {
      state_b = LineToState(value_b);
      if(state_b>3) {  // Since it was a set value, it can't be unchanged...
        printf("ERROR : Bad value '%s' for line B setting\n", value_b.c_str());
      }
    }
    int state = state_a + (state_b<<8);
    // printf("Setting a or b : (a=%02x, b=%02x) = (%04x)\n", state_a, state_b, state);
    getset_slo_scope_output_state(handle, &state);
  }

  
/* ---------------------------------------------------------------------------- */  
/* -----Output of the current state (after settings, unless in quiet mode)----- */  
/* ---------------------------------------------------------------------------- */  
  
  if(!parser.Found(wxT("q"))) {  // Always view current settings (unless in quiet mode)
    if(1) { 
      int hw_version      =get_hw_version(handle);
      int sw_version_major=get_sw_version_major(handle);
      int sw_version_minor=get_sw_version_minor(handle);
      char *fmt=(char *)"#Pololu USB programmer\n#hw_ver=%d\n#sw_ver_major=%d\n#sw_ver_minor=%d\n";
      if(verbose) {
        fmt=(char *)"Pololu USB programmer : HW version %d, SW version %d.%d\n";
      }
      printf(fmt, hw_version, sw_version_major, sw_version_minor);
    }
    
    int slo_scope_mode = getset_slo_scope_state(handle, NULL);
    if(verbose) {
      printf("  SLOscope mode : %s\n", (slo_scope_mode==SLOSCOPE_STATE_OFF)?"Off":((slo_scope_mode==SLOSCOPE_STATE_2ANALOG)?"2 analog inputs, 10KHz":"1 analog input, 1 digital input, 20KHz"));
    }
    else {
      printf("--slo=%d\n", slo_scope_mode);
    }
    
    if(slo_scope_mode == SLOSCOPE_STATE_OFF) {
      // stuff for indentity bits, etc
    }
    else {
      // period
      int period = getset_slo_scope_period(handle, NULL);
      if(verbose) {
        printf("    Sampling every %6.3f us\n", (period+1.0)/12.0);
      }
      else {
        printf("--period=%d\n", period);
      }
      
      // Value of Reference Voltage
      int voltage = get_slo_scope_reference_voltage(handle);
      if(verbose) {
        printf("    Reference Voltage (1.024V) registers : %d\n", voltage);
      }
      else {
        printf("#vref=%d\n", voltage);
      }
      
      // A & B input / outputs
      int s = getset_slo_scope_output_state_a(handle, NULL);
      int value_b = getset_slo_scope_output_state_b(handle, NULL);
  
      if(verbose) {
        printf("    Direction of external lines :\n");
        printf("      Line A : %s\n", (s==0)?"Input":((s==1)?"Ouput Low":"Output High"));
        printf("      Line B : %s\n", (value_b==0)?"Input":((value_b==1)?"Ouput Low":"Output High"));
      }
      else {
        printf("--line_a=%s\n", (s==0)?"i":((s==1)?"0":"1"));
        printf("--line_b=%s\n", (value_b==0)?"i":((value_b==1)?"0":"1"));
      }
      
      // More stuff for SLOscope mode
    }
  }
  
  usb_close(handle);
  return false;
}

int USBconfig::LineToState(wxString s) {
  int state=0xFF;
  if(s.IsSameAs(wxT("input"), false) || s.IsSameAs(wxT("i"), false)) {
    state=0x00;
  }
  if(s.IsSameAs(wxT("low"), false) || s.IsSameAs(wxT("0"))) {
    state=0x01;
  }
  if(s.IsSameAs(wxT("high"), false) || s.IsSameAs(wxT("1"))) {
    state=0x03;
  }
  //printf("Setting line=%s (=%d)\n", s.c_str(), state);
  return state;
}
